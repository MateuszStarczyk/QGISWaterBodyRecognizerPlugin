# -*- coding: utf-8 -*-
"""
/***************************************************************************
 WaterBodyRecognizerDockWidget
                                 A QGIS plugin
 The plugin allows to recognize water bodies on satellite image.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2021-03-03
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Mateusz Starczyk
        email                : starczyk.mateusz@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5.QtWidgets import QDockWidget
from PyQt5.uic import loadUiType
from PyQt5.QtCore import pyqtSignal
from .predict import predict

from qgis.core import QgsMapLayerProxyModel

FORM_CLASS, _ = loadUiType(os.path.join(os.path.dirname(__file__), 'water_body_recognizer_dockwidget.ui'))


class WaterBodyRecognizerDockWidget(QDockWidget, FORM_CLASS):
    """ The main widget class for interaction with UI
    """
    closingPlugin = pyqtSignal()

    def __init__(self, iface, parent=None):
        """ Constructor
        """
        super().__init__(parent)
        self.iface = iface
        self.index = 'ndwi'
        self.setupUi(self)
        self.mMapLayerComboBox.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.mMapLayerComboBox.layerChanged.connect(self.layerChanged)
        if self.mMapLayerComboBox.layer(0) is not None:
            self.setCombosLayer(self.mMapLayerComboBox.layer(0))
        self.rbNDWI.clicked.connect(self.indexChanged)
        self.rbANDWI.clicked.connect(self.indexChanged)
        self.rbNDWI.setChecked(True)
        self.btnClassify.clicked.connect(self.btnClassifyClicked)

    def btnClassifyClicked(self):
        try:
            predict(self, inRaster=self.mMapLayerComboBox, index=self.index, bands=self.getBands())
        except Exception as e:
            print("Error")

    def closeEvent(self, event):
        """ When plugin is closed
        """
        self.closingPlugin.emit()
        event.accept()

    def setCombosLayer(self, layer):
        self.mRedRasterBand.setLayer(layer)
        self.mGreenRasterBand.setLayer(layer)
        self.mBlueRasterBand.setLayer(layer)
        self.mNIRRasterBand.setLayer(layer)
        self.mSWIR1RasterBand.setLayer(layer)
        self.mSWIR2RasterBand.setLayer(layer)

    def layerChanged(self, layer):
        self.setCombosLayer(layer)

    def indexChanged(self):
        if self.rbNDWI.isChecked():
            self.index = 'ndwi'
        else:
            self.index = 'andwi'

    def getBands(self):
        return [
            self.mRedRasterBand.currentBand() - 1,
            self.mGreenRasterBand.currentBand() - 1,
            self.mBlueRasterBand.currentBand() - 1,
            self.mNIRRasterBand.currentBand() - 1,
            self.mSWIR1RasterBand.currentBand() - 1,
            self.mSWIR2RasterBand.currentBand() - 1
        ]
